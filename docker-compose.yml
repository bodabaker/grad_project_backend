version: "3.8"

services:
  # --------------------------------------------------
  # MQTT Broker
  # --------------------------------------------------
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - mosq_data:/mosquitto/data
      - mosq_log:/mosquitto/log
    restart: unless-stopped
    networks:
      - video_net   # <-- attach to same network as face-service

  # --------------------------------------------------
  # Beacon Service (host network)
  # --------------------------------------------------
  broker-beacon:
    image: python:3.11-slim
    container_name: broker-beacon
    network_mode: host
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - BEACON_NAME=face-broker
      - BEACON_PORT=18830
      - BROKER_PORT=1883
      # - BEACON_STATIC_IP=192.168.1.10
    volumes:
      - ./beacon.py:/app/beacon.py:ro
    command: ["python", "/app/beacon.py"]

  # --------------------------------------------------
  # MediaMTX (RTSP / RTMP / HLS / WebRTC) Server
  # --------------------------------------------------
  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    restart: unless-stopped
    volumes:
      - ./mediamtx.yml:/mediamtx.yml:ro
    ports:
      - "8554:8554"   # RTSP
      - "1935:1935"   # RTMP
      - "8888:8888"   # HLS
      - "8889:8889"   # WebRTC
    networks:
      - video_net

  # --------------------------------------------------
  # Camera Publisher (captures webcam and publishes to RTSP)
  # --------------------------------------------------
  camera-publisher:
    image: jrottenberg/ffmpeg:6.1-ubuntu
    container_name: camera-publisher
    restart: unless-stopped
    depends_on:
      - mediamtx
    devices:
      - "/dev/video0:/dev/video0"    # adjust if your camera index differs
      - "/dev/dri:/dev/dri"
    group_add:
      - "video"
    # privileged: true               # uncomment temporarily if /dev/video0 perms fail
    environment:
      CAM_DEVICE: /dev/video0
      CAM_SIZE: 1280x720
      CAM_FPS: "10"               # Match camera's native FPS
      ENCODER: libx264           # on Raspberry Pi/ARM: h264_v4l2m2m
      BITRATE: 1500k            # Lower bitrate for less latency
      RTSP_URL: rtsp://mediamtx:8554/cam
    volumes:
      - ./camera_publish.sh:/app/publish.sh:ro
    networks:
      - video_net
    entrypoint: ["/bin/sh", "-c"]
    command: ["exec sh /app/publish.sh"]

  # --------------------------------------------------
  # Face Recognition Service (consumer of RTSP)
  # --------------------------------------------------
  face-service:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: face-service
    group_add:
      - "video"
    environment:
      - TZ=Etc/UTC
      - CAMERA_URL=rtsp://mediamtx:8554/cam
      - MQTT_BROKER=mosquitto         # reachable now via Docker DNS
      - MQTT_PORT=1883
    ports:
      - "8000:8000"
    volumes:
      - ./persons:/data/persons:ro
      - ./captures:/data/caps
    depends_on:
      - mosquitto
      - mediamtx
      - camera-publisher
    restart: unless-stopped
    networks:
      - video_net

  # --------------------------------------------------
  # n8n Automation Server
  # --------------------------------------------------
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_DEFAULT_LOCALE=en
      - GENERIC_TIMEZONE=Etc/UTC
      - TZ=Etc/UTC
      - N8N_ENCRYPTION_KEY=my_fixed_key_here
      - N8N_EXECUTIONS_DATA_PRUNE=true
      - N8N_EXECUTIONS_DATA_MAX_AGE=168
      - N8N_EXECUTIONS_PRUNE_INTERVAL=60
      - N8N_ENDPOINT_WEBHOOK=api
    ports:
      - "5678:5678"
    volumes:
      - ./n8n_data:/home/node/.n8n
    restart: unless-stopped
    networks:
      - video_net

# --------------------------------------------------
# Networks & Volumes
# --------------------------------------------------
networks:
  video_net:
    driver: bridge

volumes:
  mosq_data:
  mosq_log:

